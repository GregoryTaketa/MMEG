# -*- coding: utf-8 -*-
"""
Created on Mon Apr  6 16:33:08 2020

@author: greg
"""

import random

#Initialize Pulls
pulls = []

#Elemental Pools
elements = ['fire', 'water', 'air', 'earth']
light_and_dark = ['light', 'dark']

#Minor Summons Function
def minor_summons(elemental_pool):
    """For Minor Soulstones"""
    summon = random.random()
    if summon <= 0.08:
        rank = 2
    else:
        rank = 1
        
    element = random.sample(elemental_pool, 1)
    return rank, element

minor_soulstones = int(input("How many Minor Soulstones? "))

minor_pulls = [minor_summons(elements) for m in range(minor_soulstones)]
pulls.extend(minor_pulls)

#Minor Duality Summons Function
def minor_duality_summons(elemental_pool):
    summon = random.random()
    if summon <= 0.003:
        rank = 3
    elif summon <= 0.086:
        rank = 2
    else:
        rank = 1

    element = random.sample(elemental_pool, 1)
    return rank, element

minor_duality_soulstones = int(input("How many Minor Duality Soulstones? "))

minor_duality_pulls = [minor_duality_summons(light_and_dark) for d in range(minor_duality_soulstones)]
pulls.extend(minor_duality_pulls)

#Most 2* Summons Function
def two_star_summons(elemental_pool):
    """For Epics and Elemental Soulstones based on Elemental Pools"""
    summon = random.random()
    if summon <= 0.006:
        rank = 4
    elif summon <= 0.08:
        rank = 3
    else:
        rank = 2

    element = random.sample(elemental_pool, 1)
    return rank, element

#Interface for Quantity of 2* Soulstones
epic_soulstones = int(input("How many Epic Soulstones? "))
duality_soulstones = int(input("How many Duality Soulstones? "))
fire_soulstones = int(input("How many Fire Soulstones? "))
water_soulstones = int(input("How many Water Soulstones? "))
air_soulstones = int(input("How many Air Soulstones? "))
earth_soulstones = int(input("How many Earth Soulstones? "))

#Perform the 2* Summons
two_star_stones = [epic_soulstones, fire_soulstones, water_soulstones, air_soulstones, earth_soulstones]

two_star_elements = [elements, ['fire'], ['water'], ['air'], ['earth']]

for stone_type, elemental_pool in zip(two_star_stones, two_star_elements):
    two_star_pulls = [two_star_summons(elemental_pool) for quantity in range(stone_type)]
    pulls.extend(two_star_pulls)
    
#Duality Summons Function
def duality(elemental_pool):
    """For Duality"""
    summon = random.random()
    if summon <= 0.003:
        rank = 4
    elif summon <= 0.086:
        rank = 3
    else:
        rank = 2

    element = random.sample(elemental_pool, 1)
    return rank, element

#Perform the Duality Summons
duality_pulls = [duality(light_and_dark) for d in range(duality_soulstones)]
pulls.extend(duality_pulls)
    
#Legendary Summons
def legendary(elemental_pool):
    summon = random.random()
    if summon <= 0.1:
        rank = 4
    else:  
        rank = 3
    element = random.sample(elemental_pool, 1)
    return rank, element

#Interface for Legendary Soulstones
legendary_soulstones = int(input("How many Legendary Soulstones? "))

#Perform the 3* Summons
legendary_pulls = [legendary(elements) for l in range(legendary_soulstones)]
pulls.extend(legendary_pulls)
    
#Exclusive Summons
def exclusive():
    summon = random.random()
    if summon <= 0.006:
        rank = 4
        element = random.sample(['air', 'water', 'fire'], 1)
    elif summon <= 0.08:
        rank = 3
        element = random.sample(['air', 'earth','air','fire','air','air'],1)
    else:
        rank = 2
        element = random.sample(['water', 'earth', 'air', 'air', 'earth'], 1)
        
    return rank, element

exclusive_soulstones = int(input("How many Exclusive Soulstones? "))

exclusive_pulls = [exclusive() for e in range(exclusive_soulstones)]
pulls.extend(exclusive_pulls)
    
#CotM Summons

def cotm():
    summon = random.random()
    if summon <= 0.006:
        rank = 4
        element = random.sample(['earth'], 1)
    elif summon <= 0.08:
        rank = 3
        element = random.sample(['fire', 'earth', 'water', 'air', 'earth', 'earth', 'fire'],1)
    else:
        rank = 2
        element = random.sample(['air', 'water','fire', 'fire'], 1)
        
    return rank, element

cotm_soulstones = int(input("How many Creature of the Month Soulstones? "))

cotm_pulls = [cotm() for c in range(cotm_soulstones)]
pulls.extend(cotm_pulls)

#Pure Summons

def pure(elemental_pool):
    
    summon = random.random()
    if summon <= 0.012:
        rank = 4
    elif summon <= 0.1:
        rank = 3
    else:
        rank = 2

    element = random.sample(elemental_pool, 1)
    return rank, element

pure_soulstones = int(input("How many Pure Soulstones? "))

pure_pulls = [pure(elements) for p in range(pure_soulstones)]
pulls.extend(pure_pulls)

#4-star Summons

def four_star_summons(elemental_pool):
    rank = 4
    element = random.sample(elemental_pool, 1)
    return rank, element
    
supreme_soulstones = int(input("How many Supreme Soulstones? "))
nightmare_soulstones = int(input("How many Nightmare Soulstones? "))
bright_soulstones = int(input("How many Bright Soulstones? "))

four_star_stones = [supreme_soulstones, nightmare_soulstones, bright_soulstones]

for f in four_star_stones:
    four_star_pulls = [four_star_summons(elements) for g in range(f)]
    pulls.extend(four_star_pulls)

#Counting for Missions
    
two_star_results = [rank for rank, element in pulls if rank >= 2]
three_star_results = [rank for rank, element in pulls if rank >= 3]
fire_results = [rank for rank, element in pulls if rank >=2 and element == ['fire']]
water_results = [rank for rank, element in pulls if rank >=2 and element == ['water']]
air_results = [rank for rank, element in pulls if rank >=2 and element == ['air']]
earth_results = [rank for rank, element in pulls if rank >=2 and element == ['earth']]

light_results = [rank for rank, element in pulls if element == ['light']]
dark_results = [rank for rank, element in pulls if element == ['dark']]

one_star_only = len([rank for rank, element in pulls if rank == 1])
two_star_only = len([rank for rank, element in pulls if rank == 2])
three_star_only = len([rank for rank, element in pulls if rank == 3])
four_star_only = len([rank for rank, element in pulls if rank == 4])
print("")
print("You summoned {0:.0f} Nat 1s, {1:.0f} Nat 2s, {2:.0f} Nat 3s, and {3:.0f} Nat 4s.".format(one_star_only, two_star_only, three_star_only, four_star_only))

#Legendary Festival

lf_legendary_soulstones = 0

lf_two_missions = range(5, 500+1, 5)
lf_two_rewards = [0.05, 0.1] * 50
for mission, reward in zip(lf_two_missions, lf_two_rewards):
    if len(two_star_results) >= mission:
        lf_legendary_soulstones += reward

lf_three_missions = range(5, 100+1, 5)
lf_three_rewards = [1]*2 + [0.5]*4+[1]*2+[0.5]*2+[1]*3+[2,1]*3+[5]
for mission, reward in zip(lf_three_missions, lf_three_rewards):
    if len(three_star_results) >= mission:
        lf_legendary_soulstones += reward

lf_epic_soulstones = 0
lf_element_epic_missions = [2,5,8,10,12,15,18,20,22]
lf_element_epic_rewards = [2,1,1,1]*2+[2]
lf_elements_results = [len(air_results), len(fire_results)]
for eresult in lf_elements_results:
    for mission, reward in zip(lf_element_epic_missions, lf_element_epic_rewards):
        if eresult >= mission:
            lf_epic_soulstones += reward
    
lf_element_leg_missions = [25]
lf_element_leg_rewards = [1]
for eresult in lf_elements_results:
    for mission, reward in zip(lf_element_leg_missions, lf_element_leg_rewards):
        if eresult >= mission:
            lf_legendary_soulstones += reward

print("")            
print("The Legendary Festival gives you {0:.2f} Legendary Soulstones and {1:.2f} Epic Soulstones".format(lf_legendary_soulstones, lf_epic_soulstones))

#Dark and Light Festival

df_epic_soulstones = 0
df_md_soulstones = 0
df_duality_soulstones = 0

#2* Missions

df_two_epic_missions = range(10, 90+1, 20)
df_two_epic_rewards = [1] * 5
for mission, reward in zip(df_two_epic_missions, df_two_epic_rewards):
    if len(two_star_results) >= mission:
        df_epic_soulstones += reward
        
df_two_md_missions = range(20, 100+1, 20)
df_two_md_rewards = [1] * 5
for mission, reward in zip(df_two_md_missions, df_two_md_rewards):
    if len(two_star_results) >= mission:
        df_md_soulstones += reward
        
#Light and Dark Missions
        
df_lnd_missions = [5]+list(range(10,50+1,10))
df_lnd_rewards = [1]*6
df_lnd_results = [len(light_results), len(dark_results)]
for eresult in df_lnd_results:
    for mission, reward in zip(df_lnd_missions, df_lnd_rewards):
        if eresult >= mission:
            df_duality_soulstones += reward

#Elemental Missions
            

df_element_epic_missions = [5, 10, 20]
df_element_epic_rewards = [1]*3
df_elements_results = [len(fire_results), len(water_results), len(air_results), len(earth_results)]
for eresult in df_elements_results:
    for mission, reward in zip(df_element_epic_missions, df_element_epic_rewards):
        if eresult >= mission:
            df_epic_soulstones += reward
            
df_element_duality_missions = [15, 25]
df_element_duality_rewards = [1] * 2
for eresult in df_elements_results:
    for mission, reward in zip(df_element_duality_missions, df_element_duality_rewards):
        if eresult >= mission:
            df_duality_soulstones += reward

print("")            
print("The Dark and Light Festival gives you {0:.2f} Minor Duality Soulstones, {1:.2f} Epic Soulstones, and {2:.2f} Duality Soulstones".format(df_md_soulstones, df_epic_soulstones, df_duality_soulstones))

#Epic Festival

ef_legendary_soulstones = 0
ef_epic_soulstones = 0

ef_two_missions = range(5, 500+1, 5)
ef_two_rewards = [0.4, 0.6] * 50
for mission, reward in zip(ef_two_missions, ef_two_rewards):
    if len(two_star_results) >= mission:
        ef_epic_soulstones += reward

ef_three_missions = range(5, 100+1, 5)
ef_three_rewards = [1]*2 + [0.5]*4+[1]*2+[0.5]*2+[1]*5+[2,1]*2+[5]
for mission, reward in zip(ef_three_missions, ef_three_rewards):
    if len(three_star_results) >= mission:
        ef_legendary_soulstones += reward


ef_element_epic_missions = [2,5,8,10,12,15,18,20,22]
ef_element_epic_rewards = [2,1,1,1]*2+[2]
ef_elements_results = [len(earth_results), len(water_results)]
for eresult in ef_elements_results:
    for mission, reward in zip(ef_element_epic_missions, ef_element_epic_rewards):
        if eresult >= mission:
            ef_epic_soulstones += reward
    
ef_element_leg_missions = [25]
ef_element_leg_rewards = [0.5]
for eresult in ef_elements_results:
    for mission, reward in zip(ef_element_leg_missions, ef_element_leg_rewards):
        if eresult >= mission:
            ef_legendary_soulstones += reward

print("")            
print("The Epic Festival gives you {0:.2f} Legendary Soulstones and {1:.2f} Epic Soulstones".format(ef_legendary_soulstones, ef_epic_soulstones))

#Pure Festival

pf_pure_soulstones = 0
pf_pure_missions = range(5, 501, 5)
pf_pure_rewards = [1,2,1]*33+[2]

for mission, reward in zip(pf_pure_missions, pf_pure_rewards):
    if pure_soulstones >= mission:
        pf_pure_soulstones += reward
        
pf_three_missions = range(5,30+1, 5)
pf_three_rewards = [1]*5+[5]
for mission, reward in zip(pf_three_missions, pf_three_rewards):
    if len(three_star_results) >= mission:
        pf_pure_soulstones += reward
        
pf_two_missions = range(5, 30+1, 5)
pf_two_rewards = [0.2]*5+[1]
pf_elements_results = [len(fire_results), len(water_results), len(air_results), len(earth_results)]
for eresult in pf_elements_results:
    for mission, reward in zip(pf_two_missions, pf_two_rewards):
        if eresult >= mission:
            pf_pure_soulstones += reward

print("")
print("The Pure Festival gives you {0:.2f} Pure Soulstones".format(pf_pure_soulstones))

#Reinvest the Pure Soulstones to avoid understating Pure Festival

#Force a static number from the rewards using a datatype function
pf_new_pure_soulstones = int(pf_pure_soulstones+.01)

#Force a static pull list from Round 1
pr2pulls = list(pulls)

#Summon with the new Pure Soulstones
new_pure_pulls = [pure(elements) for p in range(pf_new_pure_soulstones)]
pr2pulls.extend(new_pure_pulls)

#Recount the Results
pr2_three_star_results = [rank for rank, element in pr2pulls if rank >= 3]
pr2_fire_results = [rank for rank, element in pr2pulls if rank >=2 and element == ['fire']]
pr2_water_results = [rank for rank, element in pr2pulls if rank >=2 and element == ['water']]
pr2_air_results = [rank for rank, element in pr2pulls if rank >=2 and element == ['air']]
pr2_earth_results = [rank for rank, element in pr2pulls if rank >=2 and element == ['earth']]

#Initialize Round 2 rewards at 0
pf_round2 = 0

#Redo the Rewards

#Make sure the Pure Summons Missions include both the original and the new Summons
for mission, reward in zip(pf_pure_missions, pf_pure_rewards):
    if pure_soulstones + pf_new_pure_soulstones >= mission:
        pf_round2 += reward
        
for mission, reward in zip(pf_three_missions, pf_three_rewards):
    if len(pr2_three_star_results) >= mission:
        pf_round2 += reward

pr2_elements_results = [len(pr2_fire_results), len(pr2_water_results), len(pr2_air_results), len(pr2_earth_results)]       
for eresult in pr2_elements_results:
    for mission, reward in zip(pf_two_missions, pf_two_rewards):
        if eresult >= mission:
            pf_round2 += reward

print("")
print("If you reinvest its rewards once, the Pure Festival gives you {0:.2f} Pure Soulstones total.".format(pf_round2))

#Reinvest the Minor Duality and Duality Soulstones to avoid understating the Dark and Light Festival

#Fix soulstones to reinvest

df_new_md_soulstones = int(df_md_soulstones + .01)
df_new_duality_soulstones = int(df_duality_soulstones + .01)
df_new_epic_soulstones = int(df_epic_soulstones + 0.01)

#Fix round 1 pulls through copy

df2pulls = list(pulls)

#Summon

new_md_pulls = [minor_duality_summons(light_and_dark) for d in range(df_new_md_soulstones)]
df2pulls.extend(new_md_pulls)

new_duality_pulls = [duality(light_and_dark) for d in range(df_new_duality_soulstones)]
df2pulls.extend(new_duality_pulls)

df2_epic_pulls = [two_star_summons(elements) for e in range(df_new_epic_soulstones)]
df2pulls.extend(df2_epic_pulls)

#Recount Some Results

df2_two_star_results = [rank for rank, element in df2pulls if rank >= 2]
df2_fire_results = [rank for rank, element in df2pulls if rank >=2 and element == ['fire']]
df2_water_results = [rank for rank, element in df2pulls if rank >=2 and element == ['water']]
df2_air_results = [rank for rank, element in df2pulls if rank >=2 and element == ['air']]
df2_earth_results = [rank for rank, element in df2pulls if rank >=2 and element == ['earth']]

df2_light_results = [rank for rank, element in df2pulls if element == ['light']]
df2_dark_results = [rank for rank, element in df2pulls if element == ['dark']]

#Initialize New Totals

df2_epic = 0
df2_md = 0
df2_duality = 0

#2* Missions

for mission, reward in zip(df_two_epic_missions, df_two_epic_rewards):
    if len(df2_two_star_results) >= mission:
        df2_epic += reward
        
for mission, reward in zip(df_two_md_missions, df_two_md_rewards):
    if len(df2_two_star_results) >= mission:
        df2_md += reward
        
#Light and Dark Missions
        
df2_lnd_results = [len(df2_light_results), len(df2_dark_results)]
for eresult in df2_lnd_results:
    for mission, reward in zip(df_lnd_missions, df_lnd_rewards):
        if eresult >= mission:
            df2_duality += reward
            
#Elemental Missions
            

df2_elements_results = [len(df2_fire_results), len(df2_water_results), len(df2_air_results), len(df2_earth_results)]

for eresult in df2_elements_results:
    for mission, reward in zip(df_element_epic_missions, df_element_epic_rewards):
        if eresult >= mission:
            df2_epic += reward
            
for eresult in df2_elements_results:
    for mission, reward in zip(df_element_duality_missions, df_element_duality_rewards):
        if eresult >= mission:
            df2_duality += reward

print("")            
print("If you reinvest its rewards once, the Dark and Light Festival gives you {0:.2f} Minor Duality Soulstones, {1:.2f} Epic Soulstones, and {2:.2f} Duality Soulstones total.".format(df2_md, df2_epic, df2_duality))
